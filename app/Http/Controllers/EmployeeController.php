<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Employee;
use App\Models\Deduction;
use Barryvdh\DomPDF\Facade\Pdf;
use ZipArchive;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;
use App\Models\PayrollRecord;

class EmployeeController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search');
    
        $employees = Employee::when($search, function ($query, $search) {
            return $query->where('name', 'like', "%{$search}%")
                         ->orWhere('email', 'like', "%{$search}%")
                         ->orWhere('employee_id', 'like', "%{$search}%")
                         ->orWhere('department', 'like', "%{$search}%");
        })
        ->orderBy('created_at', 'desc')  // newest first
        ->paginate(10);
    
        return view('employees.index', compact('employees'));
    }
    

    public function create()
    {
        return view('employees.create');
    }

    public function store(Request $request)
{
    $validated = $request->validate([
        'name' => 'required|string|max:255',
        'email' => 'required|email|unique:employees',
        'phone' => 'nullable|string',
        'position' => 'required|string|max:255',
        'department' => 'required|string|max:255',
        'custom_department' => 'required_if:department,Other',
        'gross_salary' => 'required|numeric|max:99999999.99',
        'hire_date' => 'required|date',

    ]);
    $validated = $request->all();
    if ($request->department === 'Other') {
        $validated['department'] = 'Other';
        $validated['custom_department'] = $request->custom_department;
    }
    // employee_id will be automatically generated by the model
    Employee::create($validated);

    return redirect()->route('employees.index')
        ->with('success', 'Employee created successfully.');
}

    public function show(Employee $employee)
    {
        return view('employees.show', compact('employee'));
    }

    public function edit(Employee $employee)
    {
        return view('employees.edit', compact('employee'));
    }

    public function update(Request $request, Employee $employee)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
        'email' => 'required|email',
        'phone' => 'nullable|string',
        'position' => 'required|string|max:255',
        'department' => 'required|string|max:255',
        'custom_department' => 'required_if:department,Other',
        'gross_salary' => 'required|numeric|max:99999999.99',
        'hire_date' => 'required|date',

        ]);
        $validated = $request->all();
        if ($request->department === 'Other') {
            $validated['department'] = 'Other';
            $validated['custom_department'] = $request->custom_department;
        } else {
            $validated['custom_department'] = null;
        }
        $employee->update($validated);

        return redirect()->route('employees.index')->with('success', 'Employee updated successfully.');
    }

    public function destroy(Employee $employee)
    {
        $employee->delete();
        return redirect()->route('employees.index')->with('success', 'Employee deleted successfully.');
    }
    private function calculatePAYE(float $grossSalary): float
    {
        $annualRelief = 28800; // Personal relief (2400/month Ã— 12)
        $annualTaxable = ($grossSalary * 12) - $annualRelief;
        
        // Monthly taxable amount
        $monthlyTaxable = $annualTaxable / 12;

        // Kenyan 2023 tax bands (monthly)
        if ($monthlyTaxable <= 24000) {
            return $monthlyTaxable * 0.10;
        } elseif ($monthlyTaxable <= 32333) {
            return 2400 + ($monthlyTaxable - 24000) * 0.25;
        } else {
            return 4483 + ($monthlyTaxable - 32333) * 0.30;
        }
    }

    /**
     * Calculate SHIF deductions
     */private function calculateSHIF(float $grossSalary): float
{
    $rates = [
        5999 => 150,
        7999 => 300,
        11999 => 400,
        14999 => 500,
        19999 => 600,
        24999 => 750,
        29999 => 850,
        34999 => 900,
        39999 => 950,
        44999 => 1000,
        49999 => 1100,
        59999 => 1200,
        69999 => 1300,
        79999 => 1400,
        89999 => 1500,
        99999 => 1600,
        PHP_INT_MAX => 1700
    ];

    foreach ($rates as $limit => $contribution) {
        if ($grossSalary <= $limit) {
            return (float) $contribution;
        }
    }

    return 0.0; // Explicit default return
}

    /**
     * Calculate NSSF deductions
     */
    private function calculateNSSF(float $grossSalary): float
    {
        $tierI = 200; // Fixed amount
        $tierII = min($grossSalary, 18000) * 0.06; // 6% of pensionable earnings (capped at 18,000)
        return $tierI + $tierII;
    }
    public function generatePayslip(Employee $employee, Request $request)
{
    $request->validate([
        'pay_period' => 'required|date_format:Y-m',
    ]);
    
    $payPeriod = $request->input('pay_period');
    $periodDate = Carbon::parse($payPeriod);
    $yearMonth = $periodDate->format('Y-m');
    
    // 1. Check if employee was hired after pay period
    if ($employee->hire_date && $periodDate->lt($employee->hire_date)) {
        return back()->with('error', 'Employee was not yet hired in ' . $periodDate->format('F Y'));
    }
    
    // 2. Check if employee was terminated before pay period
    if ($employee->termination_date && $periodDate->gt($employee->termination_date)) {
        return back()->with('error', 'Employee was already terminated in ' . $periodDate->format('F Y'));
    }
    
    // 3. Check for existing payslip
    if ($employee->hasPaidForMonth($yearMonth)) {
        return back()->with('error', 'Payslip already exists for ' . $periodDate->format('F Y'));
    }
    
    // 4. For new employees with no payroll records
    $grossSalary = $employee->gross_salary;
    
    if (!$grossSalary || $grossSalary <= 0) {
        return back()->with('error', 'Employee has no valid salary configured');
    }
    
    // Calculate deductions
    $paye = $this->calculatePAYE($grossSalary);
    $shif = $this->calculateSHIF($grossSalary);
    $nssf = $this->calculateNSSF($grossSalary);
    
    $totalDeductions = $paye + $shif + $nssf;
    $netSalary = $grossSalary - $totalDeductions;
    
    // Store payroll record
    $payrollRecord = PayrollRecord::create([
        'employee_id' => $employee->id,
        'pay_period' => $periodDate->format('Y-m-d'),
        'gross_salary' => $grossSalary,
        'paye' => $paye,
        'shif' => $shif,
        'nssf' => $nssf,
        'total_deductions' => $totalDeductions,
        'net_salary' => $netSalary,
    ]);
    
    // Generate PDF
    $data = [
        'employee' => $employee,
        'payrollRecord' => $payrollRecord,
        'payPeriod' => $periodDate->format('F Y'),
        'payDate' => now()->format('d-m-Y'),
        'isFirstPayslip' => !$employee->payrollRecords()->exists(), // Flag for first payslip
    ];
    
    return redirect()->route('employees.show', $employee->id)
    ->with('success', 'Payslip generated successfully. Check History for ' . $periodDate->format('F Y'));


}
    // In your controller
    public function checkPayslipExists(Request $request, Employee $employee)
    {
        $payPeriod = $request->query('pay_period');
        
        $exists = PayrollRecord::where('employee_id', $employee->id)
            ->whereYear('pay_period', Carbon::parse($payPeriod)->year)
            ->whereMonth('pay_period', Carbon::parse($payPeriod)->month)
            ->exists();
        
        return response()->json(['exists' => $exists]);
    }

    public function validatePayslipPeriod(Employee $employee, Request $request)
{
    $request->validate([
        'pay_period' => 'required|date_format:Y-m',
    ]);
    
    $payPeriod = $request->input('pay_period');
    $periodDate = Carbon::parse($payPeriod);
    
    $response = [
        'valid' => true,
        'message' => '',
    ];
    
    // Check employment period
    if (!$employee->wasEmployedDuring($payPeriod)) {
        $response['valid'] = false;
        $response['message'] = 'Employee was not employed before ' . $periodDate->format('F Y');
    }
    // Check existing payslip
    elseif ($employee->hasPaidForMonth($payPeriod)) {
        $response['valid'] = false;
        $response['message'] = 'Payslip already exists for ' . $periodDate->format('F Y');
    }
    // Check salary
    elseif (!$employee->gross_salary || $employee->gross_salary <= 0) {
        $response['valid'] = false;
        $response['message'] = 'Employee has no valid salary configured';
    }
    
    return response()->json($response);
}
public function generateAllPayslips(Request $request)
{
    $request->validate([
        'pay_period' => 'required|date_format:Y-m',
    ]);

    $payPeriod = Carbon::parse($request->input('pay_period'));
    $formattedPeriod = $payPeriod->format('Y-m');

    $employees = Employee::all();

    if ($employees->isEmpty()) {
        return back()->with('success', 'No employees found in the system.');
    }

    $generatedCount = 0;
    $eligibleFound = false;

    foreach ($employees as $employee) {

        // Skip if not employed during period
        if ($employee->hire_date && $payPeriod->lt(Carbon::parse($employee->hire_date))) {
            continue;
        }
        if ($employee->termination_date && $payPeriod->gt(Carbon::parse($employee->termination_date))) {
            continue;
        }

        $eligibleFound = true;

        // Skip if already has payslip for the month
        if ($employee->hasPaidForMonth($formattedPeriod)) {
            continue;
        }

        $grossSalary = $employee->gross_salary;

        if (!$grossSalary || $grossSalary <= 0) {
            continue;
        }

        // Deductions
        $paye = $this->calculatePAYE($grossSalary);
        $shif = $this->calculateSHIF($grossSalary);
        $nssf = $this->calculateNSSF($grossSalary);

        $deductionDetails = [
            ['name' => 'Basic Salary', 'amount' => $grossSalary, 'type' => 'earning'],
            ['name' => 'PAYE', 'amount' => $paye, 'type' => 'deduction'],
            ['name' => 'SHIF', 'amount' => $shif, 'type' => 'deduction'],
            ['name' => 'NSSF', 'amount' => $nssf, 'type' => 'deduction'],
        ];

        $customDeductions = Deduction::where('is_statutory', false)->get();
        foreach ($customDeductions as $deduction) {
            $amount = $deduction->is_percentage 
                ? $grossSalary * ($deduction->amount / 100)
                : $deduction->amount;

            $deductionDetails[] = [
                'name' => $deduction->name,
                'amount' => $amount,
                'type' => 'deduction'
            ];
        }

        $totalDeductions = collect($deductionDetails)
            ->where('type', 'deduction')
            ->sum('amount');
        
        $netSalary = $grossSalary - $totalDeductions;

        // Save payroll record
        PayrollRecord::create([
            'employee_id' => $employee->id,
            'pay_period' => $payPeriod->format('Y-m-d'),
            'gross_salary' => $grossSalary,
            'paye' => $paye,
            'shif' => $shif,
            'nssf' => $nssf,
            'total_deductions' => $totalDeductions,
            'net_salary' => $netSalary,
        ]);

        $generatedCount++;
    }

    if (!$eligibleFound) {
        return back()->with('success', 'No employees were active during ' . $payPeriod->format('F Y') . '.');
    }

    if ($generatedCount === 0) {
        return back()->with('success', 'All eligible employees already have payslips for ' . $payPeriod->format('F Y') . '.');
    }

    return back()->with('success', $generatedCount . ' payslip(s) generated successfully for ' . $payPeriod->format('F Y') . '.');
}


public function payrollHistory(Employee $employee)
    {
        $records = $employee->payrollRecords()
            ->orderBy('pay_period', 'desc')
            ->paginate(12);
            
        return view('employees.payroll-history', compact('employee', 'records'));
    }
    public function payrollAnalytics()
    {
        // Monthly totals from payroll records (paginated)
        $monthlyTotals = PayrollRecord::selectRaw('
            YEAR(pay_period) as year,
            MONTH(pay_period) as month,
            SUM(gross_salary) as total_gross,
            SUM(paye) as total_paye,
            SUM(shif) as total_shif,
            SUM(nssf) as total_nssf,
            SUM(total_deductions) as total_deductions,
            SUM(net_salary) as total_net
        ')
        ->groupBy('year', 'month')
        ->orderBy('year', 'desc')
        ->orderBy('month', 'desc')
        ->paginate(10);
    
        // Current month (latest)
        $latestMonth = PayrollRecord::selectRaw('
            YEAR(pay_period) as year,
            MONTH(pay_period) as month
        ')
        ->orderBy('pay_period', 'desc')
        ->first();
    
        $currentMonthData = null;
    
        if ($latestMonth) {
            $currentMonthData = PayrollRecord::selectRaw('
                COUNT(DISTINCT employee_id) as employee_count,
                SUM(paye) as total_paye
            ')
            ->whereYear('pay_period', $latestMonth->year)
            ->whereMonth('pay_period', $latestMonth->month)
            ->first();
        }
    
        // Totals (optional overall stats)
        $totalGross = $monthlyTotals->sum('total_gross');
        $totalNet = $monthlyTotals->sum('total_net');
        $totalStatutory = $monthlyTotals->sum('total_paye') +
                          $monthlyTotals->sum('total_shif') +
                          $monthlyTotals->sum('total_nssf');
        $totalDeductions = $monthlyTotals->sum('total_deductions');
    
        // Statutory breakdown
        $kraAmount = $monthlyTotals->sum('total_paye');
        $nssfAmount = $monthlyTotals->sum('total_nssf');
        $nhifAmount = $monthlyTotals->sum('total_shif'); 
        $totalEmployees = Employee::count(); 

        return view('payroll_deductions.analytics', compact(
            'monthlyTotals',
            'totalGross',
            'totalNet',
            'totalStatutory',
            'totalDeductions',
            'kraAmount',
            'nssfAmount',
            'nhifAmount',
            'currentMonthData',
            'totalEmployees'
 
        ));
    }
    
    public function downloadPayslip(PayrollRecord $payrollRecord)
    {
        $payPeriod = $payrollRecord->pay_period instanceof Carbon
            ? $payrollRecord->pay_period
            : Carbon::parse($payrollRecord->pay_period);
    
        $data = [
            'employee'      => $payrollRecord->employee,
            'payrollRecord' => $payrollRecord,
            'payPeriod'     => $payPeriod->format('F Y'),
            'payDate'       => now()->format('d-m-Y'),
        ];
    
        return Pdf::loadView('employees.payslip', $data)
            ->setPaper('A4', 'portrait')
            ->download("payslip-{$payrollRecord->employee->employee_id}-{$payPeriod->format('Y-m')}.pdf");
    }

}
