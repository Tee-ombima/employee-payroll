<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Employee;
use App\Models\Deduction;
use Barryvdh\DomPDF\Facade\Pdf;
use ZipArchive;
use Illuminate\Support\Facades\Storage;
class EmployeeController extends Controller
{
    public function index()
{
    $employees = Employee::paginate(15); // 15 items per page
    return view('employees.index', compact('employees'));
}

    public function create()
    {
        return view('employees.create');
    }

    public function store(Request $request)
{
    $validated = $request->validate([
        'name' => 'required|string|max:255',
        'email' => 'required|email|unique:employees',
        'phone' => 'nullable|string',
        'position' => 'required|string|max:255',
        'department' => 'required|string|max:255',
        'gross_salary' => 'required|numeric|min:0',
        'hire_date' => 'required|date',
    ]);

    // employee_id will be automatically generated by the model
    Employee::create($validated);

    return redirect()->route('employees.index')
        ->with('success', 'Employee created successfully.');
}

    public function show(Employee $employee)
    {
        return view('employees.show', compact('employee'));
    }

    public function edit(Employee $employee)
    {
        return view('employees.edit', compact('employee'));
    }

    public function update(Request $request, Employee $employee)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:employees,email,'.$employee->id,
            'position' => 'required|string|max:255',
            'gross_salary' => 'required|numeric|min:0',
        ]);

        $employee->update($validated);

        return redirect()->route('employees.index')->with('success', 'Employee updated successfully.');
    }

    public function destroy(Employee $employee)
    {
        $employee->delete();
        return redirect()->route('employees.index')->with('success', 'Employee deleted successfully.');
    }
    private function calculatePAYE(float $grossSalary): float
    {
        $annualRelief = 28800; // Personal relief (2400/month Ã— 12)
        $annualTaxable = ($grossSalary * 12) - $annualRelief;
        
        // Monthly taxable amount
        $monthlyTaxable = $annualTaxable / 12;

        // Kenyan 2023 tax bands (monthly)
        if ($monthlyTaxable <= 24000) {
            return $monthlyTaxable * 0.10;
        } elseif ($monthlyTaxable <= 32333) {
            return 2400 + ($monthlyTaxable - 24000) * 0.25;
        } else {
            return 4483 + ($monthlyTaxable - 32333) * 0.30;
        }
    }

    /**
     * Calculate NHIF deductions
     */private function calculateNHIF(float $grossSalary): float
{
    $rates = [
        5999 => 150,
        7999 => 300,
        11999 => 400,
        14999 => 500,
        19999 => 600,
        24999 => 750,
        29999 => 850,
        34999 => 900,
        39999 => 950,
        44999 => 1000,
        49999 => 1100,
        59999 => 1200,
        69999 => 1300,
        79999 => 1400,
        89999 => 1500,
        99999 => 1600,
        PHP_INT_MAX => 1700
    ];

    foreach ($rates as $limit => $contribution) {
        if ($grossSalary <= $limit) {
            return (float) $contribution;
        }
    }

    return 0.0; // Explicit default return
}

    /**
     * Calculate NSSF deductions
     */
    private function calculateNSSF(float $grossSalary): float
    {
        $tierI = 200; // Fixed amount
        $tierII = min($grossSalary, 18000) * 0.06; // 6% of pensionable earnings (capped at 18,000)
        return $tierI + $tierII;
    }
// Add to EmployeeController
public function generatePayslip(Employee $employee)
{
    $grossSalary = $employee->gross_salary;
    
    // Calculate statutory deductions
    $paye = $this->calculatePAYE($grossSalary);
    $nhif = $this->calculateNHIF($grossSalary);
    $housingLevy = $grossSalary * 0.015;
    $nssf = $this->calculateNSSF($grossSalary);
    
    // Get custom deductions
    $customDeductions = Deduction::where('is_statutory', false)->get()
        ->map(function ($deduction) use ($grossSalary) {
            $amount = $deduction->is_percentage 
                ? $grossSalary * ($deduction->amount / 100)
                : $deduction->amount;
                
            return [
                'name' => $deduction->name,
                'amount' => $amount,
                'type' => 'deduction'
            ];
        });

    // Build deduction details array
    $deductionDetails = [
        ['name' => 'Basic Salary', 'amount' => $grossSalary, 'type' => 'earning'],
        ['name' => 'PAYE', 'amount' => $paye, 'type' => 'deduction'],
        ['name' => 'NHIF', 'amount' => $nhif, 'type' => 'deduction'],
        ['name' => 'Housing Levy', 'amount' => $housingLevy, 'type' => 'deduction'],
        ['name' => 'NSSF', 'amount' => $nssf, 'type' => 'deduction'],
    ];
    
    // Merge with custom deductions
    $deductionDetails = array_merge($deductionDetails, $customDeductions->toArray());
    
    $totalDeductions = collect($deductionDetails)
        ->where('type', 'deduction')
        ->sum('amount');
    
    $netSalary = $grossSalary - $totalDeductions;
    
    $data = [
        'employee' => $employee,
        'payPeriod' => now()->format('F Y'),
        'payDate' => now()->format('d-m-Y'),
        'deductionDetails' => $deductionDetails, // Now properly defined
        'totalDeductions' => $totalDeductions,
        'netSalary' => $netSalary,
    ];
    
    return PDF::loadView('employees.payslip', $data)
        ->download("payslip-{$employee->employee_id}-".now()->format('Y-m').'.pdf');
}

public function generateAllPayslips()
{
    $employees = Employee::all();
    $zip = new ZipArchive;
    $zipFileName = 'all-payslips-'.now()->format('Y-m-d').'.zip';
    $zipPath = storage_path('app/public/'.$zipFileName);

    if ($zip->open($zipPath, ZipArchive::CREATE) === TRUE) {
        foreach ($employees as $employee) {
            // Get all data needed for the payslip
            $grossSalary = $employee->gross_salary;
            
            // Calculate deductions (same as your single payslip)
            $paye = $this->calculatePAYE($grossSalary);
            $nhif = $this->calculateNHIF($grossSalary);
            $housingLevy = $grossSalary * 0.015;
            $nssf = $this->calculateNSSF($grossSalary);
            
            // Build deduction details array
            $deductionDetails = [
                ['name' => 'Basic Salary', 'amount' => $grossSalary, 'type' => 'earning'],
                ['name' => 'PAYE', 'amount' => $paye, 'type' => 'deduction'],
                ['name' => 'NHIF', 'amount' => $nhif, 'type' => 'deduction'],
                ['name' => 'Housing Levy', 'amount' => $housingLevy, 'type' => 'deduction'],
                ['name' => 'NSSF', 'amount' => $nssf, 'type' => 'deduction'],
            ];
            
            // Add custom deductions if any
            $customDeductions = Deduction::where('is_statutory', false)->get();
            foreach ($customDeductions as $deduction) {
                $amount = $deduction->is_percentage 
                    ? $grossSalary * ($deduction->amount / 100)
                    : $deduction->amount;
                    
                $deductionDetails[] = [
                    'name' => $deduction->name,
                    'amount' => $amount,
                    'type' => 'deduction'
                ];
            }
            
            $totalDeductions = collect($deductionDetails)
                ->where('type', 'deduction')
                ->sum('amount');
            
            $netSalary = $grossSalary - $totalDeductions;

            $pdf = PDF::loadView('employees.payslip', [
                'employee' => $employee,
                'deductionDetails' => $deductionDetails, // Now included
                'totalDeductions' => $totalDeductions,
                'netSalary' => $netSalary,
                'payPeriod' => now()->format('F Y'),
                'payDate' => now()->format('d-m-Y'),
                // Include any other variables your view needs
            ]);
            
            $zip->addFromString(
                'payslip-'.$employee->id.'-'.now()->format('Y-m').'.pdf', 
                $pdf->output()
            );
        }
        $zip->close();
    }

    return response()->download($zipPath)->deleteFileAfterSend(true);

}
}
